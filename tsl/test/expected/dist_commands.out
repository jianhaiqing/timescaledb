-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
\c :TEST_DBNAME :ROLE_SUPERUSER
-- Support for execute_sql_and_filter_server_name_on_error()
\unset ECHO
psql:include/remote_exec.sql:5: NOTICE:  schema "test" already exists, skipping
psql:include/filter_exec.sql:5: NOTICE:  schema "test" already exists, skipping
SET ROLE :ROLE_1;
SELECT * FROM add_data_node('data_node_1', host => 'localhost',
                            database => 'data_node_1',
                            bootstrap_user => :'ROLE_CLUSTER_SUPERUSER');
  node_name  |   host    | port  |  database   | node_created | database_created | extension_created 
-------------+-----------+-------+-------------+--------------+------------------+-------------------
 data_node_1 | localhost | 15432 | data_node_1 | t            | t                | t
(1 row)

SELECT * FROM add_data_node('data_node_2', host => 'localhost',
                            database => 'data_node_2',
                            bootstrap_user => :'ROLE_CLUSTER_SUPERUSER');
  node_name  |   host    | port  |  database   | node_created | database_created | extension_created 
-------------+-----------+-------+-------------+--------------+------------------+-------------------
 data_node_2 | localhost | 15432 | data_node_2 | t            | t                | t
(1 row)

SELECT * FROM add_data_node('data_node_3', host => 'localhost',
                            database => 'data_node_3',
                            bootstrap_user => :'ROLE_CLUSTER_SUPERUSER');
  node_name  |   host    | port  |  database   | node_created | database_created | extension_created 
-------------+-----------+-------+-------------+--------------+------------------+-------------------
 data_node_3 | localhost | 15432 | data_node_3 | t            | t                | t
(1 row)

\des+
                                                                   List of foreign servers
    Name     |    Owner    | Foreign-data wrapper | Access privileges | Type | Version |                      FDW options                       | Description 
-------------+-------------+----------------------+-------------------+------+---------+--------------------------------------------------------+-------------
 data_node_1 | test_role_1 | timescaledb_fdw      |                   |      |         | (host 'localhost', port '15432', dbname 'data_node_1') | 
 data_node_2 | test_role_1 | timescaledb_fdw      |                   |      |         | (host 'localhost', port '15432', dbname 'data_node_2') | 
 data_node_3 | test_role_1 | timescaledb_fdw      |                   |      |         | (host 'localhost', port '15432', dbname 'data_node_3') | 
(3 rows)

RESET ROLE;
CREATE FUNCTION _timescaledb_internal.invoke_distributed_commands()
RETURNS void
AS :TSL_MODULE_PATHNAME, 'tsl_invoke_distributed_commands'
LANGUAGE C STRICT;
CREATE FUNCTION _timescaledb_internal.invoke_faulty_distributed_command()
RETURNS void
AS :TSL_MODULE_PATHNAME, 'tsl_invoke_faulty_distributed_command'
LANGUAGE C STRICT;
SET ROLE :ROLE_1;
SELECT _timescaledb_internal.invoke_distributed_commands();
INFO:  data_node_1 result: PGRES_COMMAND_OK
INFO:  data_node_2 result: PGRES_COMMAND_OK
INFO:  data_node_3 result: PGRES_COMMAND_OK
INFO:  data_node_1 result: PGRES_COMMAND_OK
INFO:  data_node_2 result: PGRES_COMMAND_OK
INFO:  data_node_1 result: PGRES_COMMAND_OK
INFO:  data_node_2 result: PGRES_COMMAND_OK
 invoke_distributed_commands 
-----------------------------
 
(1 row)

\c data_node_1
\dt
             List of relations
 Schema |    Name    | Type  |    Owner    
--------+------------+-------+-------------
 public | disttable1 | table | test_role_1
 public | disttable2 | table | test_role_1
(2 rows)

SELECT * FROM disttable1;
             time             | device | temp  
------------------------------+--------+-------
 Sat Sep 18 00:00:00 1976 PDT |     47 | 103.4
(1 row)

\c data_node_2
\dt
             List of relations
 Schema |    Name    | Type  |    Owner    
--------+------------+-------+-------------
 public | disttable1 | table | test_role_1
 public | disttable2 | table | test_role_1
(2 rows)

SELECT * FROM disttable1;
             time             | device | temp  
------------------------------+--------+-------
 Sat Sep 18 00:00:00 1976 PDT |     47 | 103.4
(1 row)

\c data_node_3
\dt
             List of relations
 Schema |    Name    | Type  |    Owner    
--------+------------+-------+-------------
 public | disttable1 | table | test_role_1
(1 row)

SELECT * FROM disttable1;
 time | device | temp 
------+--------+------
(0 rows)

\c :TEST_DBNAME :ROLE_SUPERUSER
SET ROLE :ROLE_1;
-- Verify failed insert command gets fully rolled back
\set ON_ERROR_STOP 0
SELECT _timescaledb_internal.invoke_faulty_distributed_command();
ERROR:  [data_node_3]: relation "public.disttable2" does not exist
\set ON_ERROR_STOP 1
\c data_node_1
SELECT * from disttable2;
 time | device | temp 
------+--------+------
(0 rows)

\c data_node_2
SELECT * from disttable2;
 time | device | temp 
------+--------+------
(0 rows)

-- Test connection session identity
\c :TEST_DBNAME :ROLE_SUPERUSER
\unset ECHO
psql:include/remote_exec.sql:5: NOTICE:  schema "test" already exists, skipping
-- Register is_frontend_session() function and test that it returns false for
-- connections openned by test suite. This simualates behaviour expected
-- with a client connections.
CREATE OR REPLACE FUNCTION is_frontend_session()
RETURNS BOOL
AS :TSL_MODULE_PATHNAME, 'test_is_frontend_session' LANGUAGE C;
\c data_node_1
CREATE OR REPLACE FUNCTION is_frontend_session()
RETURNS BOOL
AS :TSL_MODULE_PATHNAME, 'test_is_frontend_session' LANGUAGE C;
SELECT is_frontend_session();
 is_frontend_session 
---------------------
 f
(1 row)

\c data_node_2
CREATE OR REPLACE FUNCTION is_frontend_session()
RETURNS BOOL
AS :TSL_MODULE_PATHNAME, 'test_is_frontend_session' LANGUAGE C;
SELECT is_frontend_session();
 is_frontend_session 
---------------------
 f
(1 row)

\c data_node_3
CREATE OR REPLACE FUNCTION is_frontend_session()
RETURNS BOOL
AS :TSL_MODULE_PATHNAME, 'test_is_frontend_session' LANGUAGE C;
SELECT is_frontend_session();
 is_frontend_session 
---------------------
 f
(1 row)

\c :TEST_DBNAME :ROLE_SUPERUSER
SET ROLE :ROLE_1;
SELECT is_frontend_session();
 is_frontend_session 
---------------------
 f
(1 row)

-- Ensure peer dist id is already set and can be set only once
\set ON_ERROR_STOP 0
SELECT * FROM test.remote_exec('{data_node_1}', $$ SELECT * FROM _timescaledb_internal.set_peer_dist_id('77348176-09da-4a80-bc78-e31bdf5e63ec'); $$);
NOTICE:  [data_node_1]:  SELECT * FROM _timescaledb_internal.set_peer_dist_id('77348176-09da-4a80-bc78-e31bdf5e63ec')
ERROR:  [data_node_1]: distributed peer ID already set
\set ON_ERROR_STOP 1
-- Repeat is_frontend_session() test again, but this time using connections openned from frontend
-- to backend nodes. Must return true.
SELECT * FROM test.remote_exec(NULL, $$ SELECT is_frontend_session(); $$);
NOTICE:  [data_node_1]:  SELECT is_frontend_session()
NOTICE:  [data_node_1]:
is_frontend_session
-------------------
t                  
(1 row)


NOTICE:  [data_node_2]:  SELECT is_frontend_session()
NOTICE:  [data_node_2]:
is_frontend_session
-------------------
t                  
(1 row)


NOTICE:  [data_node_3]:  SELECT is_frontend_session()
NOTICE:  [data_node_3]:
is_frontend_session
-------------------
t                  
(1 row)


 remote_exec 
-------------
 
(1 row)

-- Test distributed_exec()
-- Make sure dist session is properly set
SELECT * FROM distributed_exec('DO $$ BEGIN ASSERT(SELECT is_frontend_session()) = true; END; $$;');
 distributed_exec 
------------------
 
(1 row)

-- Test creating and dropping a table
SELECT * FROM distributed_exec('CREATE TABLE dist_test (id int)');
 distributed_exec 
------------------
 
(1 row)

SELECT * FROM distributed_exec('INSERT INTO dist_test values (7)');
 distributed_exec 
------------------
 
(1 row)

SELECT * FROM test.remote_exec(NULL, $$ SELECT * from dist_test; $$);
NOTICE:  [data_node_1]:  SELECT * from dist_test
NOTICE:  [data_node_1]:
id
--
 7
(1 row)


NOTICE:  [data_node_2]:  SELECT * from dist_test
NOTICE:  [data_node_2]:
id
--
 7
(1 row)


NOTICE:  [data_node_3]:  SELECT * from dist_test
NOTICE:  [data_node_3]:
id
--
 7
(1 row)


 remote_exec 
-------------
 
(1 row)

SELECT * FROM distributed_exec('DROP TABLE dist_test');
 distributed_exec 
------------------
 
(1 row)

\set ON_ERROR_STOP 0
SELECT * FROM distributed_exec('INSERT INTO dist_test VALUES (8)', '{data_node_1}');
ERROR:  [data_node_1]: relation "dist_test" does not exist
\set ON_ERROR_STOP 1
-- Test creating and dropping a role
CREATE ROLE dist_test_role;
-- Expect this to be an error, since data nodes are created on the same instance
\set ON_ERROR_STOP 0
SELECT test.execute_sql_and_filter_data_node_name_on_error($$
SELECT * FROM distributed_exec('CREATE ROLE dist_test_role');
$$);
ERROR:  [data_node_x]: role "dist_test_role" already exists
\set ON_ERROR_STOP 1
SELECT * FROM test.remote_exec(NULL, $$ SELECT true from pg_catalog.pg_roles WHERE rolname = 'dist_test_role'; $$);
NOTICE:  [data_node_1]:  SELECT true from pg_catalog.pg_roles WHERE rolname = 'dist_test_role'
NOTICE:  [data_node_1]:
bool
----
t   
(1 row)


NOTICE:  [data_node_2]:  SELECT true from pg_catalog.pg_roles WHERE rolname = 'dist_test_role'
NOTICE:  [data_node_2]:
bool
----
t   
(1 row)


NOTICE:  [data_node_3]:  SELECT true from pg_catalog.pg_roles WHERE rolname = 'dist_test_role'
NOTICE:  [data_node_3]:
bool
----
t   
(1 row)


 remote_exec 
-------------
 
(1 row)

DROP ROLE DIST_TEST_ROLE;
\set ON_ERROR_STOP 0
SELECT test.execute_sql_and_filter_data_node_name_on_error($$
SELECT * FROM distributed_exec('DROP ROLE dist_test_role');
$$);
ERROR:  [data_node_x]: role "dist_test_role" does not exist
\set ON_ERROR_STOP 1
-- Do not allow to run distributed_exec() on a data nodes
\c data_node_1
\set ON_ERROR_STOP 0
SELECT * FROM distributed_exec('SELECT 1');
ERROR:  function must be run on the access node only
\set ON_ERROR_STOP 1
\c :TEST_DBNAME :ROLE_SUPERUSER
DROP DATABASE data_node_1;
DROP DATABASE data_node_2;
DROP DATABASE data_node_3;
-- Test TS execution on non-TSDB server
CREATE EXTENSION postgres_fdw;
CREATE SERVER myserver FOREIGN DATA WRAPPER postgres_fdw 
    OPTIONS (host 'foo', dbname 'foodb', port '5432');
\set ON_ERROR_STOP 0
SELECT * FROM test.remote_exec('{myserver}', $$ SELECT 1; $$);
ERROR:  data node "myserver" is not a TimescaleDB server
\set ON_ERROR_STOP 1
DROP SERVER myserver;
DROP EXTENSION postgres_fdw;
