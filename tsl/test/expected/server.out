-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
-- Need to be super user to create extension and add servers
\c :TEST_DBNAME :ROLE_SUPERUSER;
GRANT USAGE ON FOREIGN DATA WRAPPER timescaledb_fdw TO :ROLE_DEFAULT_PERM_USER;
CREATE OR REPLACE FUNCTION show_servers()
RETURNS TABLE(server_name NAME, host TEXT, port INT, dbname NAME)
AS :TSL_MODULE_PATHNAME, 'test_server_show' LANGUAGE C;
SET ROLE :ROLE_DEFAULT_PERM_USER;
-- Create server with DDL statements as reference. NOTE, 'IF NOT
-- EXISTS' on 'CREATE SERVER' and 'CREATE USER MAPPING' is not
-- supported on PG 9.6
CREATE SERVER server_1 FOREIGN DATA WRAPPER timescaledb_fdw
OPTIONS (host 'localhost', port '5432', dbname 'server_1');
-- Create a user mapping for the server
CREATE USER MAPPING FOR :ROLE_SUPERUSER SERVER server_1 OPTIONS (user 'cluster_user_1');
-- Add servers using TimescaleDB server management API
SELECT * FROM add_server('server_2');
 server_name |   host    | port | database  |     username      |  server_username  | created 
-------------+-----------+------+-----------+-------------------+-------------------+---------
 server_2    | localhost | 5432 | db_server | default_perm_user | default_perm_user | t
(1 row)

\set ON_ERROR_STOP 0
-- Add again
SELECT * FROM add_server('server_2');
ERROR:  server "server_2" already exists
-- Add NULL server
SELECT * FROM add_server(NULL);
ERROR:  invalid server name
\set ON_ERROR_STOP 1
-- Should not generate error with if_not_exists option
SELECT * FROM add_server('server_2', if_not_exists => true);
 server_name |   host    | port | database  |     username      |  server_username  | created 
-------------+-----------+------+-----------+-------------------+-------------------+---------
 server_2    | localhost | 5432 | db_server | default_perm_user | default_perm_user | f
(1 row)

SELECT * FROM add_server('server_3', host => '192.168.3.4', database => 'server_2', remote_user => 'cluster_user_2');
 server_name |    host     | port | database |     username      | server_username | created 
-------------+-------------+------+----------+-------------------+-----------------+---------
 server_3    | 192.168.3.4 | 5432 | server_2 | default_perm_user | cluster_user_2  | t
(1 row)

-- Server exists, but no user mapping
CREATE SERVER server_4 FOREIGN DATA WRAPPER timescaledb_fdw
OPTIONS (host 'localhost', port '5432', dbname 'server_4');
-- User mapping should be added with NOTICE
SELECT * FROM add_server('server_4', if_not_exists => true);
NOTICE:  adding user mapping for "default_perm_user" to server "server_4"
 server_name |   host    | port | database  |     username      |  server_username  | created 
-------------+-----------+------+-----------+-------------------+-------------------+---------
 server_4    | localhost | 5432 | db_server | default_perm_user | default_perm_user | f
(1 row)

SELECT * FROM show_servers();
 server_name |    host     | port |  dbname   
-------------+-------------+------+-----------
 server_1    | localhost   | 5432 | server_1
 server_2    | localhost   | 5432 | db_server
 server_3    | 192.168.3.4 | 5432 | server_2
 server_4    | localhost   | 5432 | server_4
(4 rows)

-- Should show up in view
SELECT server_name, options FROM timescaledb_information.server
ORDER BY server_name;
 server_name |                   options                    
-------------+----------------------------------------------
 server_1    | {host=localhost,port=5432,dbname=server_1}
 server_2    | {host=localhost,port=5432,dbname=db_server}
 server_3    | {host=192.168.3.4,port=5432,dbname=server_2}
 server_4    | {host=localhost,port=5432,dbname=server_4}
(4 rows)

-- List foreign servers and user mappings
SELECT srvname, srvoptions
FROM pg_foreign_server
ORDER BY srvname;
 srvname  |                  srvoptions                  
----------+----------------------------------------------
 server_1 | {host=localhost,port=5432,dbname=server_1}
 server_2 | {host=localhost,port=5432,dbname=db_server}
 server_3 | {host=192.168.3.4,port=5432,dbname=server_2}
 server_4 | {host=localhost,port=5432,dbname=server_4}
(4 rows)

-- Need super user permissions to list user mappings
RESET ROLE;
SELECT rolname, srvname, umoptions
FROM pg_user_mapping um, pg_authid a, pg_foreign_server fs
WHERE a.oid = um.umuser AND fs.oid = um.umserver
ORDER BY srvname;
      rolname      | srvname  |        umoptions         
-------------------+----------+--------------------------
 super_user        | server_1 | {user=cluster_user_1}
 default_perm_user | server_2 | {user=default_perm_user}
 default_perm_user | server_3 | {user=cluster_user_2}
 default_perm_user | server_4 | {user=default_perm_user}
(4 rows)

SET ROLE :ROLE_DEFAULT_PERM_USER;
-- Delete a server
\set ON_ERROR_STOP 0
-- Must use cascade because of user mappings
SELECT * FROM delete_server('server_3');
ERROR:  cannot drop server server_3 because other objects depend on it
\set ON_ERROR_STOP 1
SELECT * FROM delete_server('server_3', cascade => true);
NOTICE:  drop cascades to user mapping for default_perm_user on server server_3
 delete_server 
---------------
 t
(1 row)

SELECT srvname, srvoptions
FROM pg_foreign_server;
 srvname  |                 srvoptions                  
----------+---------------------------------------------
 server_1 | {host=localhost,port=5432,dbname=server_1}
 server_2 | {host=localhost,port=5432,dbname=db_server}
 server_4 | {host=localhost,port=5432,dbname=server_4}
(3 rows)

RESET ROLE;
SELECT rolname, srvname, umoptions
FROM pg_user_mapping um, pg_authid a, pg_foreign_server fs
WHERE a.oid = um.umuser AND fs.oid = um.umserver
ORDER BY srvname;
      rolname      | srvname  |        umoptions         
-------------------+----------+--------------------------
 super_user        | server_1 | {user=cluster_user_1}
 default_perm_user | server_2 | {user=default_perm_user}
 default_perm_user | server_4 | {user=default_perm_user}
(3 rows)

\set ON_ERROR_STOP 0
-- Deleting a non-existing server generates error
SELECT * FROM delete_server('server_3');
ERROR:  server "server_3" does not exist
\set ON_ERROR_STOP 1
-- Deleting non-existing server with "if_exists" set does not generate error
SELECT * FROM delete_server('server_3', if_exists => true);
 delete_server 
---------------
 f
(1 row)

SELECT * FROM show_servers();
 server_name |   host    | port |  dbname   
-------------+-----------+------+-----------
 server_1    | localhost | 5432 | server_1
 server_2    | localhost | 5432 | db_server
 server_4    | localhost | 5432 | server_4
(3 rows)

-- Test that servers are added to a hypertable
CREATE TABLE disttable(time timestamptz, device int, temp float);
SELECT * FROM create_hypertable('disttable', 'time', replication_factor => 1);
NOTICE:  adding not-null constraint to column "time"
 hypertable_id | schema_name | table_name | created 
---------------+-------------+------------+---------
             1 | public      | disttable  | t
(1 row)

-- All servers should be added. Remote hypertable ID should be NULL since not set yet
SELECT * FROM _timescaledb_catalog.hypertable_server;
 hypertable_id | server_hypertable_id | server_name 
---------------+----------------------+-------------
             1 |                      | server_1
             1 |                      | server_2
             1 |                      | server_4
(3 rows)

DROP TABLE disttable;
CREATE TABLE disttable(time timestamptz, device int, temp float);
-- Test some bad create_hypertable() parameter values for distributed hypertables
\set ON_ERROR_STOP 0
-- Bad replication factor
SELECT * FROM create_hypertable('disttable', 'time', replication_factor => 0, servers => '{ "server_2", "server_4" }');
NOTICE:  adding not-null constraint to column "time"
ERROR:  invalid replication_factor for non-empty server list
SELECT * FROM create_hypertable('disttable', 'time', replication_factor => 32768);
ERROR:  invalid replication factor
SELECT * FROM create_hypertable('disttable', 'time', replication_factor => -1);
ERROR:  invalid replication factor
-- Non-existing server
SELECT * FROM create_hypertable('disttable', 'time', replication_factor => 1, servers => '{ "server_3" }');
NOTICE:  adding not-null constraint to column "time"
ERROR:  server "server_3" does not exist
\set ON_ERROR_STOP 1
-- Use a subset of servers
SELECT * FROM create_hypertable('disttable', 'time', replication_factor => 1, servers => '{ "server_2", "server_4" }');
NOTICE:  adding not-null constraint to column "time"
 hypertable_id | schema_name | table_name | created 
---------------+-------------+------------+---------
             4 | public      | disttable  | t
(1 row)

SELECT * FROM _timescaledb_catalog.hypertable_server;
 hypertable_id | server_hypertable_id | server_name 
---------------+----------------------+-------------
             4 |                      | server_2
             4 |                      | server_4
(2 rows)

-- Deleting a server should remove the hypertable_server mappings for that server
SELECT * FROM delete_server('server_2', cascade => true);
NOTICE:  drop cascades to user mapping for default_perm_user on server server_2
 delete_server 
---------------
 t
(1 row)

SELECT * FROM _timescaledb_catalog.hypertable_server;
 hypertable_id | server_hypertable_id | server_name 
---------------+----------------------+-------------
             4 |                      | server_4
(1 row)

-- Should also clean up hypertable_server when using standard DDL commands
DROP SERVER server_4 CASCADE;
NOTICE:  drop cascades to user mapping for default_perm_user on server server_4
SELECT * FROM _timescaledb_catalog.hypertable_server;
 hypertable_id | server_hypertable_id | server_name 
---------------+----------------------+-------------
(0 rows)

-- Creating a distributed hypertable without any servers should fail
DROP TABLE disttable;
CREATE TABLE disttable(time timestamptz, device int, temp float);
\set ON_ERROR_STOP 0
SELECT * FROM create_hypertable('disttable', 'time', replication_factor => 1, servers => '{ }');
NOTICE:  adding not-null constraint to column "time"
ERROR:  no servers can be assigned to "disttable"
\set ON_ERROR_STOP 1
SELECT * FROM delete_server('server_1', cascade => true);
NOTICE:  drop cascades to user mapping for super_user on server server_1
 delete_server 
---------------
 t
(1 row)

SELECT * FROM show_servers();
 server_name | host | port | dbname 
-------------+------+------+--------
(0 rows)

\set ON_ERROR_STOP 0
SELECT * FROM create_hypertable('disttable', 'time', replication_factor => 1);
NOTICE:  adding not-null constraint to column "time"
ERROR:  no servers can be assigned to "disttable"
\set ON_ERROR_STOP 1
