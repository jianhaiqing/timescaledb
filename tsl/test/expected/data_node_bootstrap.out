-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.
-- Test functionality of add_server() bootstrapping.
-- Most of this already done in other tests, so we check some corner cases.
\c :TEST_DBNAME :ROLE_SUPERUSER;
ALTER ROLE :ROLE_DEFAULT_PERM_USER PASSWORD 'perm_user_pass';
GRANT USAGE ON FOREIGN DATA WRAPPER timescaledb_fdw TO :ROLE_DEFAULT_PERM_USER;
CREATE OR REPLACE FUNCTION show_servers()
RETURNS TABLE(server_name NAME, host TEXT, port INT, dbname NAME)
AS :TSL_MODULE_PATHNAME, 'test_server_show' LANGUAGE C;
-- Cleanup from other potential tests that created these databases
SET client_min_messages TO ERROR;
DROP DATABASE IF EXISTS bootstrap_test;
SET client_min_messages TO NOTICE;
SET ROLE :ROLE_DEFAULT_PERM_USER;
-- Super user is required to make remote connection without password
--
-- local_user         = :ROLE_DEFAULT_PERM_USER
-- remote_user        = :ROLE_DEFAULT_PERM_USER
-- bootstrap_user     = :ROLE_DEFAULT_PERM_USER
-- bootstrap_database = 'postgres'
\set ON_ERROR_STOP 0
SELECT * FROM add_server('bootstrap_test', database => 'bootstrap_test', password => 'perm_user_pass');
ERROR:  password is required
\set ON_ERROR_STOP 1
SELECT * FROM show_servers();
 server_name | host | port | dbname 
-------------+------+------+--------
(0 rows)

-- local_user         = :ROLE_SUPERUSER
-- remote_user        = :ROLE_SUPERUSER
-- bootstrap_user     = :ROLE_SUPERUSER
-- bootstrap_database = 'postgres'
RESET ROLE;
SELECT * FROM add_server('bootstrap_test', database => 'bootstrap_test', password => 'perm_user_pass');
  server_name   |   host    | port  |    database    |  username  | server_username | created 
----------------+-----------+-------+----------------+------------+-----------------+---------
 bootstrap_test | localhost | 15432 | bootstrap_test | super_user | super_user      | t
(1 row)

SET ROLE :ROLE_DEFAULT_PERM_USER;
SELECT * FROM show_servers();
  server_name   |   host    | port  |     dbname     
----------------+-----------+-------+----------------
 bootstrap_test | localhost | 15432 | bootstrap_test
(1 row)

-- Ensure database and extensions are installed
\c bootstrap_test :ROLE_SUPERUSER
SELECT extname, nspname
FROM pg_extension e, pg_namespace n
WHERE e.extnamespace = n.oid;
   extname   |  nspname   
-------------+------------
 plpgsql     | pg_catalog
 timescaledb | public
(2 rows)

\c :TEST_DBNAME :ROLE_SUPERUSER;
-- After delete database and extension should still be there
SELECT * FROM delete_server('bootstrap_test', cascade => true);
NOTICE:  drop cascades to user mapping for super_user on server bootstrap_test
 delete_server 
---------------
 t
(1 row)

SELECT * FROM show_servers();
 server_name | host | port | dbname 
-------------+------+------+--------
(0 rows)

\c bootstrap_test :ROLE_SUPERUSER;
SELECT extname, nspname
FROM pg_extension e, pg_namespace n
WHERE e.extnamespace = n.oid;
   extname   |  nspname   
-------------+------------
 plpgsql     | pg_catalog
 timescaledb | public
(2 rows)

\c :TEST_DBNAME :ROLE_SUPERUSER;
-- Try to recreate server with the same name, database and extension exists
--
-- local_user         = :ROLE_SUPERUSER
-- remote_user        = :ROLE_SUPERUSER
-- bootstrap_user     = :ROLE_SUPERUSER
-- bootstrap_database = 'postgres'
\set ON_ERROR_STOP 0
SELECT * FROM add_server('bootstrap_test', database => 'bootstrap_test', password => 'perm_user_pass');
ERROR:  database "bootstrap_test" already exists on the remote server
\set ON_ERROR_STOP 1
SELECT * FROM show_servers();
 server_name | host | port | dbname 
-------------+------+------+--------
(0 rows)

-- Test if_not_exists functionality (no local server, but remote database and extension exists)
--
-- local_user         = :ROLE_SUPERUSER
-- remote_user        = :ROLE_SUPERUSER
-- bootstrap_user     = :ROLE_SUPERUSER
-- bootstrap_database = 'postgres'
SELECT * FROM add_server('bootstrap_test', database => 'bootstrap_test', password => 'perm_user_pass', if_not_exists => true);
NOTICE:  remote server database "bootstrap_test" already exists, skipping
  server_name   |   host    | port  |    database    |  username  | server_username | created 
----------------+-----------+-------+----------------+------------+-----------------+---------
 bootstrap_test | localhost | 15432 | bootstrap_test | super_user | super_user      | t
(1 row)

SELECT * FROM show_servers();
  server_name   |   host    | port  |     dbname     
----------------+-----------+-------+----------------
 bootstrap_test | localhost | 15432 | bootstrap_test
(1 row)

-- Test if_not_exists functionality (has local server, has database database but no extension installed)
--
-- local_user         = :ROLE_SUPERUSER
-- remote_user        = :ROLE_SUPERUSER
-- bootstrap_user     = :ROLE_SUPERUSER
-- bootstrap_database = 'postgres'
\c bootstrap_test :ROLE_SUPERUSER;
SELECT extname, nspname
FROM pg_extension e, pg_namespace n
WHERE e.extnamespace = n.oid;
   extname   |  nspname   
-------------+------------
 plpgsql     | pg_catalog
 timescaledb | public
(2 rows)

DROP EXTENSION timescaledb CASCADE;
SELECT extname, nspname
FROM pg_extension e, pg_namespace n
WHERE e.extnamespace = n.oid;
 extname |  nspname   
---------+------------
 plpgsql | pg_catalog
(1 row)

\c :TEST_DBNAME :ROLE_SUPERUSER;
SELECT * FROM add_server('bootstrap_test', database => 'bootstrap_test', password => 'perm_user_pass', if_not_exists => true);
NOTICE:  server "bootstrap_test" already exists, skipping
NOTICE:  remote server database "bootstrap_test" already exists, skipping
  server_name   |   host    | port  |    database    |  username  | server_username | created 
----------------+-----------+-------+----------------+------------+-----------------+---------
 bootstrap_test | localhost | 15432 | bootstrap_test | super_user | super_user      | f
(1 row)

\c bootstrap_test :ROLE_SUPERUSER;
SELECT extname, nspname
FROM pg_extension e, pg_namespace n
WHERE e.extnamespace = n.oid;
   extname   |  nspname   
-------------+------------
 plpgsql     | pg_catalog
 timescaledb | public
(2 rows)

\c :TEST_DBNAME :ROLE_SUPERUSER;
SELECT * FROM delete_server('bootstrap_test', cascade => true);
NOTICE:  drop cascades to user mapping for super_user on server bootstrap_test
 delete_server 
---------------
 t
(1 row)

DROP DATABASE bootstrap_test;
-- Test automatic schema creation
CREATE DATABASE bootstrap_schema_test;
\c bootstrap_schema_test :ROLE_SUPERUSER;
CREATE SCHEMA bootstrap_schema;
SET client_min_messages TO error;
CREATE EXTENSION timescaledb WITH SCHEMA bootstrap_schema;
SET client_min_messages TO notice;
SELECT extname, nspname
FROM pg_extension e, pg_namespace n
WHERE e.extnamespace = n.oid;
   extname   |     nspname      
-------------+------------------
 plpgsql     | pg_catalog
 timescaledb | bootstrap_schema
(2 rows)

SELECT * FROM bootstrap_schema.add_server('bootstrap_test', database => 'bootstrap_test', password => 'perm_user_pass');
  server_name   |   host    | port  |    database    |  username  | server_username | created 
----------------+-----------+-------+----------------+------------+-----------------+---------
 bootstrap_test | localhost | 15432 | bootstrap_test | super_user | super_user      | t
(1 row)

\c bootstrap_test :ROLE_SUPERUSER;
SELECT extname, nspname
FROM pg_extension e, pg_namespace n
WHERE e.extnamespace = n.oid;
   extname   |     nspname      
-------------+------------------
 plpgsql     | pg_catalog
 timescaledb | bootstrap_schema
(2 rows)

\c bootstrap_schema_test :ROLE_SUPERUSER;
SELECT * FROM bootstrap_schema.add_server('bootstrap_test', database => 'bootstrap_test', password => 'perm_user_pass', if_not_exists => true);
NOTICE:  server "bootstrap_test" already exists, skipping
NOTICE:  remote server database "bootstrap_test" already exists, skipping
  server_name   |   host    | port  |    database    |  username  | server_username | created 
----------------+-----------+-------+----------------+------------+-----------------+---------
 bootstrap_test | localhost | 15432 | bootstrap_test | super_user | super_user      | f
(1 row)

\c :TEST_DBNAME :ROLE_SUPERUSER;
DROP DATABASE bootstrap_schema_test;
DROP DATABASE bootstrap_test;
-- Test users setting
--
-- local_user         = :ROLE_DEFAULT_PERM_USER
-- remote_user        = :ROLE_DEFAULT_PERM_USER
-- bootstrap_user     = :ROLE_SUPERUSER
-- bootstrap_database = 'template1'
SELECT * FROM add_server('bootstrap_test', database => 'bootstrap_test', local_user => :'ROLE_DEFAULT_PERM_USER', remote_user => :'ROLE_DEFAULT_PERM_USER', password => 'perm_user_pass', bootstrap_user => :'ROLE_SUPERUSER', bootstrap_database => 'template1');
  server_name   |   host    | port  |    database    |     username      |  server_username  | created 
----------------+-----------+-------+----------------+-------------------+-------------------+---------
 bootstrap_test | localhost | 15432 | bootstrap_test | default_perm_user | default_perm_user | t
(1 row)

\c bootstrap_test :ROLE_DEFAULT_PERM_USER;
SELECT extname, nspname
FROM pg_extension e, pg_namespace n
WHERE e.extnamespace = n.oid;
   extname   |  nspname   
-------------+------------
 plpgsql     | pg_catalog
 timescaledb | public
(2 rows)

\c :TEST_DBNAME :ROLE_SUPERUSER;
SELECT * FROM delete_server('bootstrap_test', cascade => true);
NOTICE:  drop cascades to user mapping for default_perm_user on server bootstrap_test
 delete_server 
---------------
 t
(1 row)

-- Test for ongoing transaction
BEGIN;
\set ON_ERROR_STOP 0
SELECT * FROM add_server('bootstrap_test', database => 'bootstrap_test', password => 'perm_user_pass');
ERROR:  add_server cannot run inside a transaction block
\set ON_ERROR_STOP 1
COMMIT;
SELECT * FROM show_servers();
 server_name | host | port | dbname 
-------------+------+------+--------
(0 rows)

DROP DATABASE bootstrap_test;
-- Test unusual database names
--
-- local_user         = :ROLE_SUPERUSER
-- remote_user        = :ROLE_SUPERUSER
-- bootstrap_user     = :ROLE_SUPERUSER
-- bootstrap_database = 'postgres'
SELECT true FROM add_server('bootstrap_test1', database => 'Unusual Name', password => 'perm_user_pass');
 bool 
------
 t
(1 row)

SELECT true FROM add_server('bootstrap_test1', database => 'Unusual Name', password => 'perm_user_pass', if_not_exists => true);
NOTICE:  server "bootstrap_test1" already exists, skipping
NOTICE:  remote server database "Unusual Name" already exists, skipping
 bool 
------
 t
(1 row)

SELECT true FROM add_server('bootstrap_test2', database => U&'\0441\043B\043E\043D', password => 'perm_user_pass');
 bool 
------
 t
(1 row)

SELECT true FROM add_server('bootstrap_test2', database => U&'\0441\043B\043E\043D', password => 'perm_user_pass', if_not_exists => true);
NOTICE:  server "bootstrap_test2" already exists, skipping
NOTICE:  remote server database "слон" already exists, skipping
 bool 
------
 t
(1 row)

SELECT count(*) FROM show_servers();
 count 
-------
     2
(1 row)

SELECT true FROM pg_database WHERE datname = 'Unusual Name';
 bool 
------
 t
(1 row)

SELECT true FROM pg_database WHERE datname = U&'\0441\043B\043E\043D';
 bool 
------
 t
(1 row)

SELECT true FROM delete_server('bootstrap_test1', cascade => true);
NOTICE:  drop cascades to user mapping for super_user on server bootstrap_test1
 bool 
------
 t
(1 row)

SELECT true FROM delete_server('bootstrap_test2', cascade => true);
NOTICE:  drop cascades to user mapping for super_user on server bootstrap_test2
 bool 
------
 t
(1 row)

DROP DATABASE "Unusual Name";
DROP DATABASE U&"\0441\043B\043E\043D";
